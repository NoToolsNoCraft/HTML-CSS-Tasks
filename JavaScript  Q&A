What is the difference between double equal to and triple equal to in JS?
When we use double equal to it compares values that we given. For example:
5 == '5'; // true, because '5' (string) is coerced to 5 (number) before comparison

When we use triple equal to it compares values as well as data types of those values. Check out the example:
5 === '5'; // false, because the types are different (number vs. string)
5 === 5;   // true, because both value and type are the same

Which one should we use more? It is prefered to use triple equal to more since it provides a more accurate answer.
=====================================================================================================================
What is an Expression?
An expression is any valid piece of code that produces a value. It can be as simple as a number or a variable, 
or more complex like a mathematical operation or a function call. Expressions can be used wherever a value is 
expected (e.g., on the right side of an assignment).
________________________________________________________
5;               // Simple value
x;               // Variable reference
3 + 2;           // Arithmetic expression, evaluates to 5
myFunction();    // Function call expression
________________________________________________________
=====================================================================================================================
What is a Statement?
A statement is a complete line of code that performs an action. Statements often include expressions but do more, 
such as declaring variables, executing conditionals, or controlling the flow of a program. A statement typically ends 
with a semicolon (;), though it's optional in JavaScript.
________________________________________________________
let x = 5;            // Variable declaration statement
if (x > 3) {          // Conditional statement
  console.log("Hi");  // This statement calls a function (with an expression as an argument)
}
________________________________________________________
=====================================================================================================================
What is a difference between if else and ternary operator?
If else is a statement, while ternary operator is an expression. The ternary operator provides a shorter syntax for if...else.
Here is an if...else example:
________________________________________________________
let age = 20;

if (age >= 18) {
  console.log("You are eligible to vote.");
} else {
  console.log("You are not eligible to vote.");
}
________________________________________________________

Also here is an example for tenary operator:
________________________________________________________
let age = 20;
age >= 18 ? console.log("You are eligible to vote.") : console.log("You are not eligible to vote.");
________________________________________________________
=====================================================================================================================
Is JavaScript single-threaded or multi-threaded?
JavaScript is single-threaded, which means it can only execute one task at a time in a single sequence. This design 
is based on the idea that a single thread handles all operations, so only one line of code runs at any given moment. 
However, JavaScript uses an event loop to manage tasks like user interactions or data fetching. This event loop allows 
it to handle asynchronous tasks, like waiting for data from a server, by pausing these tasks and moving on to other code 
until the waiting task is ready, giving the impression that it can do multiple things at once.
=====================================================================================================================
Synchronous & asynchronous tasks
Synchronous tasks in programming are those that run one after another, in sequence. This means the code waits for the 
current task to finish before moving on to the next one, like waiting for a light to turn green before you can move your 
car. Asynchronous tasks, on the other hand, don’t make the program wait. When a task is asynchronous, the program can start 
it and move on to other tasks while it’s still running. For example, if you ask your friend to bake a cake (an asynchronous 
task), you can still do other things while you wait for the cake to finish baking, instead of just standing there doing nothing. 
In programming, this helps keep the program running smoothly, even if some tasks take time to complete.
JavaScript can perform both synchronous and asynchronous tasks. By default, JavaScript runs code synchronously, meaning it 
executes one line at a time in order. However, it can handle asynchronous tasks using features like setTimeout, fetch, Promises, 
and async/await. These allow JavaScript to start tasks that may take time, like waiting for data from a server, without stopping 
the rest of the program. This mix of synchronous and asynchronous behavior helps JavaScript remain responsive and efficient, 
especially in web development where user interactions and data fetching are common.
=====================================================================================================================
Data types in JavaScript
In JavaScript, data types can be categorized as primitive or non-primitive (also known as reference types). 
Here's how they are classified:

Primitive Data Types
Number: e.g., 42, 3.14
String: e.g., 'Hello', "World"
Boolean: e.g., true, false
Undefined: e.g., let x; // x is undefined
Null: e.g., let y = null
Symbol: e.g., Symbol('unique')
BigInt: e.g., 12345678901234567890n

Non-Primitive (Reference) Data Types
Object: e.g., { name: 'John' }, [1, 2, 3], functions, arrays, etc.

Primitive data types are immutable and hold a single value. Non-primitive data types, like objects, 
are mutable and can hold collections of values or more complex structures.
